% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sumLp_num.R
\name{sumLp_num}
\alias{sumLp_num}
\alias{Rcpp_sumLp_num}
\title{Relaxed Parallel Sum}
\usage{
sumLp_num(x, nthread = parallel::detectCores())
}
\arguments{
\item{x}{The numeric vector to compute the sum on.}

\item{nthread}{The number of threads to use for parallelization. Defaults to \code{parallel::detectCores()}.}
}
\value{
The sum of the numeric vector.
}
\description{
A parallel version of the sum function.
}
\details{
Does not handle vectors larger than 2^31 - 1 elements (2,147,483,647 elements).
Make sure there is no NA value inside the vector, or the result becomes NA.

On Windows, the parallel version requires more RAM than the singlethreaded version.
The memory requirements scales linearly with the number of threads requested.
}
\examples{

# Random data
set.seed(1)
x <- runif(n = 50000000, min = -0.5, max = 1)

# Singlethreaded version
system.time({
  y1 <- sumLp_num(x = x, nthread = 1)
})

# Multithreaded version
system.time({
  y2 <- sumLp_num(x = x, nthread = 2)
})

# Proof check
all.equal(y1, y2)

\dontrun{
# "BIG DATAish": Requires at least 16GB RAM free
# Not advised to run on Windows, will explode RAM on many core systems
x <- runif(n = 2^31 - 1, min = -0.5, max = 1)
system.time({
  y1 <- sum(x = x, nthread = parallel::detectCores())
})
system.time({
  y2 <- sumLp_num(x = x, nthread = parallel::detectCores())
})
all.equal(y1, y2)
}

}
