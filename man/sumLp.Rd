% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sumLp.R
\name{sumLp}
\alias{sumLp}
\alias{sumLp.integer}
\alias{sumLp.numeric}
\alias{Rcpp_sumLp_int}
\alias{Rcpp_sumLp_num}
\title{Relaxed Parallel Sum}
\usage{
sumLp(x, nthread = parallel::detectCores())
}
\arguments{
\item{x}{The integer or numeric vector to compute the sum on.}

\item{nthread}{The number of threads to use for parallelization. Defaults to \code{parallel::detectCores()}.}
}
\value{
The sum of the integer or numeric vector.
}
\description{
A parallel version of the sum function.
}
\details{
Make sure there is no NA value inside the vector, or the result becomes NA.

On Windows, the parallel version requires more RAM than the singlethreaded version.
The memory requirements scales linearly with the number of threads requested on Windows.

Use the following functions if you already know the input types: \itemize{
\item{\code{sumLp.integer}}{ for integer}
\item{\code{sumLp.numeric}}{ for numeric}
}
}
\examples{

# Random data
set.seed(1)
x <- runif(n = 50000000, min = -0.5, max = 1)

# Base version
system.time({
  y0 <- sum(x)
})

# Singlethreaded version
system.time({
  y1 <- sumLp(x = x, nthread = 1)
})

# Multithreaded version
system.time({
  y2 <- sumLp(x = x, nthread = 2)
})

# Proof check
stopifnot(all.equal(y0, y1), all.equal(y0, y2))
rm(x, y0, y1, y2)

\dontrun{
# "BIG DATAish": Requires at least 16GB RAM free
# Not advised to run on Windows, will explode RAM on many core systems
x <- runif(n = 2^31 - 1, min = -0.5, max = 1)
system.time({
  y1 <- sum(x)
})
system.time({
  y2 <- sumLp(x = x, nthread = parallel::detectCores())
})
stopifnot(all.equal(y1, y2))
rm(x, y1, y2)
}

}
