% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/divLp.R
\name{divLp}
\alias{divLp}
\alias{divLp.numeric}
\alias{Rcpp_divLp_num}
\title{Relaxed Parallel Division}
\usage{
divLp(x, y, nthread = parallel::detectCores())
}
\arguments{
\item{x}{The first vector to compute the division per element on.}

\item{y}{The second vector to compute the division per element on.}

\item{nthread}{The number of threads to use for parallelization. Defaults to \code{parallel::detectCores()}.}
}
\value{
\code{x / y}.
}
\description{
A parallel version of A / B where A and B are both integers or numerics (and returns a numeric).
}
\details{
Make sure there is no NA value inside the vector, or the result becomes NA.

In addition, integer division is not really existing here. The base numeric function handles everything.

On Windows, the parallel version requires more RAM than the singlethreaded version.
The memory requirements scales linearly with the number of threads requested on Windows.

Use the following functions if you already know the input types: \itemize{
\item{\code{divLp.numeric}}{ for numeric}
}
}
\examples{

# Random data
set.seed(1)
x <- runif(50000000, min = -0.5, max = 1)
y <- runif(50000000, min = -0.5, max = 1)

# Base version
system.time({
  z0 <- x / y
})

# Singlethreaded version
system.time({
  z1 <- divLp(x = x, y = y, nthread = 1)
})

# Multithreaded version
system.time({
  z2 <- divLp(x = x, y = y, nthread = 2)
})

# Proof check
stopifnot(all.equal(z0, z2), all.equal(z0, z2))
rm(x, y, z0, z1, z2)

\dontrun{
# "BIG DATAish": Requires at least 32GB RAM free
# Not advised to run on Windows, will explode RAM on many core systems
x <- runif(n = 2^31 - 1, min = -0.5, max = 1)
y <- runif(n = 2^31 - 1, min = -0.5, max = 1)
system.time({
  z1 <- x / y
})
system.time({
  z2 <- divLp(x = x, y = y, nthread = parallel::detectCores())
})
stopifnot(all.equal(z1, z2))
rm(x, z1, z2)
}

}
